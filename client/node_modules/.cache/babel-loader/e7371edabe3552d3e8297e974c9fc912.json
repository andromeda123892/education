{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Denislove\\\\Desktop\\\\project-x\\\\client\\\\src\\\\components\\\\Tasks.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nexport default function Tasks({\n  task\n}) {\n  _s();\n\n  const [reactive, setReactive] = useState('btn-light');\n\n  const doActive = async () => {\n    console.log(reactive);\n    setReactive('btn-primary');\n    console.log(reactive);\n  };\n\n  const notActive = async () => {\n    console.log('');\n    setReactive('btn-light');\n  };\n\n  const privet = async () => {\n    console.log('привет');\n    return Promise.resolve(1);\n  };\n\n  const eventlist = id1 => {\n    console.log(id1); // el2 = document.getElementById(id1)\n\n    let el2 = document.getElementsByClassName('text_tasks 1 4id'); // document.getElementById(id1).addEventListener('click', () =>{console.log('fgfg')})\n    // console.log('привет')\n  };\n\n  let tasking = task.question.split(';');\n\n  if (tasking[tasking.length - 1] == '') {\n    tasking.pop();\n  }\n\n  let count = 0; //document.getElementsByClassName(button')\n\n  if (task.type == 1) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question_text\",\n        children: [\"\\u0422\\u0418\\u041F 1 \\u0417\\u0430\\u0434\\u0430\\u043D\\u0438\\u0435, \", task.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text_task\",\n        children: task.info\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: tasking.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `text_tasks ${count = count + 1} ${task.TaskId}id`,\n          onClick: privet,\n          children: [data, task.ThemeId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this) // <div className=\"programms\" style={{background: '#C7EEFF'}}>\n    //   {themes.name}\n    //   {themes.id}\n    // </div>\n    ;\n  }\n\n  if (task.type == 2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question_text\",\n        children: [\"\\u0422\\u0418\\u041F 2 \\u0417\\u0430\\u0434\\u0430\\u043D\\u0438\\u0435, \", task.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text_task\",\n        children: task.info\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: tasking.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `${count}_${task.TaskId}`,\n          className: `text_tasks ${count = count + 1} ${task.TaskId}id`,\n          children: [data, task.ThemeId, console.log(task.TaskId), eventlist(`${count - 1}_${task.TaskId}`)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this) // <div className=\"programms\" style={{background: '#C7EEFF'}}>\n    //   {themes.name}\n    //   {themes.id}\n    // </div>\n    ;\n  }\n}\n\n_s(Tasks, \"Ouz4Xgd9bJT4zHzcQ6K9vMdt4p4=\");\n\n_c = Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["C:/Users/Denislove/Desktop/project-x/client/src/components/Tasks.js"],"names":["React","useState","Tasks","task","reactive","setReactive","doActive","console","log","notActive","privet","Promise","resolve","eventlist","id1","el2","document","getElementsByClassName","tasking","question","split","length","pop","count","type","id","info","map","data","TaskId","ThemeId"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nexport default function Tasks({task}) {\r\n  const [reactive, setReactive] = useState('btn-light')\r\n  const doActive = async() =>{\r\n    console.log(reactive)\r\n    setReactive('btn-primary')\r\n    console.log(reactive)\r\n}\r\nconst notActive = async() =>{ \r\n    console.log('')\r\n    setReactive('btn-light')\r\n}\r\nconst privet = async() =>{\r\n  console.log('привет')\r\n  return Promise.resolve(1);\r\n}\r\nconst eventlist = (id1) =>{\r\n  console.log(id1)\r\n  // el2 = document.getElementById(id1)\r\n  let el2 = document.getElementsByClassName('text_tasks 1 4id')\r\n  // document.getElementById(id1).addEventListener('click', () =>{console.log('fgfg')})\r\n  // console.log('привет')\r\n}\r\n  let tasking = task.question.split(';')\r\n  if (tasking[tasking.length - 1] == ''){\r\n    tasking.pop()\r\n  }\r\n  let count = 0\r\n\r\n  //document.getElementsByClassName(button')\r\n  if (task.type == 1){\r\n  return (\r\n    <div>\r\n      <div className='question_text'>\r\n        ТИП 1\r\n        Задание, {task.id} \r\n      </div>\r\n      <div className='text_task'>\r\n        {task.info}\r\n      </div>\r\n      <div>\r\n        {tasking.map(data =>\r\n        <div className={`text_tasks ${count = count + 1} ${task.TaskId}id`} onClick={privet}>\r\n            \r\n            {data}\r\n            {task.ThemeId}\r\n            {/* {document.getElementsByClassName('text_task')} */}\r\n        </div>\r\n        )}\r\n      </div>\r\n      \r\n    </div>\r\n    // <div className=\"programms\" style={{background: '#C7EEFF'}}>\r\n    //   {themes.name}\r\n    //   {themes.id}\r\n    // </div>\r\n  )}\r\n  if (task.type == 2){\r\n    return (\r\n      <div>\r\n      <div className='question_text'>\r\n        ТИП 2\r\n        Задание, {task.id} \r\n      </div>\r\n      <div className='text_task'>\r\n        {task.info}\r\n      </div>\r\n      <div>\r\n      {tasking.map(data =>\r\n        <div id={`${count}_${task.TaskId}`} className={`text_tasks ${count = count + 1} ${task.TaskId}id`}>\r\n            {data}\r\n            {task.ThemeId}\r\n            {console.log(task.TaskId)}\r\n            {eventlist(`${count - 1}_${task.TaskId}`)}\r\n            \r\n        </div>\r\n        )}\r\n      </div>\r\n      </div>\r\n      // <div className=\"programms\" style={{background: '#C7EEFF'}}>\r\n      //   {themes.name}\r\n      //   {themes.id}\r\n      // </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}